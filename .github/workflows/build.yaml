  name: Push the Docker image to AWS ECR Repo
  on:
    push:
      branches:
        - main
  
  env:
    ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
    EKS_CLUSTER_NAME: eks-cluster
    AWS_REGION: us-east-1
  
  jobs:
    Build:
      name: Build
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
          # with: 
          #   registry: 034362066177.dkr.ecr.us-east-1.amazonaws.com

        - name: Get commit hash
          id: get-commit-hash
          run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
        - name: Get timestamp
          id: get-timestamp
          run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

        - name: Build, tag, and push the image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
            IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
          run: |
            # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker build -t usecase/javacicd_demo .
            docker tag usecase/javacicd_demo:latest 034362066177.dkr.ecr.us-east-1.amazonaws.com/usecase/javacicd_demo:latest
            docker push 034362066177.dkr.ecr.us-east-1.amazonaws.com/usecase/javacicd_demo:latest   
    
        - name: Deploy to EKS
          env: 
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ steps.commit.outputs.short }}
          run: |
            kubectl rollout restart deployment/regapp-deployment
            kubectl apply -f manifests/deployment.yaml
            kubectl apply -f manifests/service.yaml
